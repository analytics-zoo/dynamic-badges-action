{
  "_from": "@actions/core@^1.2.4",
  "_id": "@actions/core@1.2.4",
  "_inBundle": false,
  "_integrity": "sha512-YJCEq8BE3CdN8+7HPZ/4DxJjk/OkZV2FFIf+DlZTC/4iBlzYCD5yjRR6eiOS5llO11zbRltIRuKAjMKaWTE6cg==",
  "_location": "/@actions/core",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@actions%2fcore",
    "fetchSpec": "^1.2.4",
    "name": "@actions/core",
    "raw": "@actions/core@^1.2.4",
    "rawSpec": "^1.2.4",
    "registry": true,
    "saveSpec": null,
    "scope": "@actions",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@actions/core/-/core-1.2.4.tgz",
  "_shasum": "96179dbf9f8d951dd74b40a0dbd5c22555d186ab",
  "_spec": "@actions/core@^1.2.4",
  "_where": "/home/simon/Projects/dynamic-badges-action",
  "bugs": {
    "url": "https://github.com/actions/toolkit/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Actions core lib",
  "devDependencies": {
    "@types/node": "^12.0.2"
  },
  "directories": {
    "lib": "lib",
    "test": "__tests__"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/actions/toolkit/tree/master/packages/core",
  "keywords": [
    "actions",
    "core",
    "github"
  ],
  "license": "MIT",
  "main": "lib/core.js",
  "name": "@actions/core",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# `@actions/core`\n\n> Core functions for setting results, logging, registering secrets and exporting variables across actions\n\n## Usage\n\n### Import the package\n\n```js\n// javascript\nconst core = require('@actions/core');\n\n// typescript\nimport * as core from '@actions/core';\n```\n\n#### Inputs/Outputs\n\nAction inputs can be read with `getInput`.  Outputs can be set with `setOutput` which makes them available to be mapped into inputs of other actions to ensure they are decoupled.\n\n```js\nconst myInput = core.getInput('inputName', { required: true });\n\ncore.setOutput('outputKey', 'outputVal');\n```\n\n#### Exporting variables\n\nSince each step runs in a separate process, you can use `exportVariable` to add it to this step and future steps environment blocks.\n\n```js\ncore.exportVariable('envVar', 'Val');\n```\n\n#### Setting a secret\n\nSetting a secret registers the secret with the runner to ensure it is masked in logs.\n\n```js\ncore.setSecret('myPassword');\n```\n\n#### PATH Manipulation\n\nTo make a tool's path available in the path for the remainder of the job (without altering the machine or containers state), use `addPath`.  The runner will prepend the path given to the jobs PATH.\n\n```js\ncore.addPath('/path/to/mytool');\n```\n\n#### Exit codes\n\nYou should use this library to set the failing exit code for your action.  If status is not set and the script runs to completion, that will lead to a success.\n\n```js\nconst core = require('@actions/core');\n\ntry {\n  // Do stuff\n}\ncatch (err) {\n  // setFailed logs the message and sets a failing exit code\n  core.setFailed(`Action failed with error ${err}`);\n}\n\nNote that `setNeutral` is not yet implemented in actions V2 but equivalent functionality is being planned.\n\n```\n\n#### Logging\n\nFinally, this library provides some utilities for logging. Note that debug logging is hidden from the logs by default. This behavior can be toggled by enabling the [Step Debug Logs](../../docs/action-debugging.md#step-debug-logs).\n\n```js\nconst core = require('@actions/core');\n\nconst myInput = core.getInput('input');\ntry {\n  core.debug('Inside try block');\n  \n  if (!myInput) {\n    core.warning('myInput was not set');\n  }\n  \n  if (core.isDebug()) {\n    // curl -v https://github.com\n  } else {\n    // curl https://github.com\n  }\n\n  // Do stuff\n}\ncatch (err) {\n  core.error(`Error ${err}, action may still succeed though`);\n}\n```\n\nThis library can also wrap chunks of output in foldable groups.\n\n```js\nconst core = require('@actions/core')\n\n// Manually wrap output\ncore.startGroup('Do some function')\ndoSomeFunction()\ncore.endGroup()\n\n// Wrap an asynchronous function call\nconst result = await core.group('Do something async', async () => {\n  const response = await doSomeHTTPRequest()\n  return response\n})\n```\n\n#### Action state\n\nYou can use this library to save state and get state for sharing information between a given wrapper action: \n\n**action.yml**\n```yaml\nname: 'Wrapper action sample'\ninputs:\n  name:\n    default: 'GitHub'\nruns:\n  using: 'node12'\n  main: 'main.js'\n  post: 'cleanup.js'\n```\n\nIn action's `main.js`:\n\n```js\nconst core = require('@actions/core');\n\ncore.saveState(\"pidToKill\", 12345);\n```\n\nIn action's `cleanup.js`:\n```js\nconst core = require('@actions/core');\n\nvar pid = core.getState(\"pidToKill\");\n\nprocess.kill(pid);\n```",
  "readmeFilename": "README.md",
  "repository": {
    "directory": "packages/core",
    "type": "git",
    "url": "git+https://github.com/actions/toolkit.git"
  },
  "scripts": {
    "audit-moderate": "npm install && npm audit --audit-level=moderate",
    "test": "echo \"Error: run tests from root\" && exit 1",
    "tsc": "tsc"
  },
  "types": "lib/core.d.ts",
  "version": "1.2.4"
}
